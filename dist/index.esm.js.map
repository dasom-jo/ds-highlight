{"version":3,"file":"index.esm.js","sources":["../../src/components/TextLine.tsx"],"sourcesContent":["import React, { useState, useEffect, ReactNode, JSX } from 'react';\r\n\r\ninterface TextLineProps {\r\n  children: ReactNode; // 원본 텍스트를 children으로 받음\r\n  keywords: string[]; // 강조할 키워드 목록\r\n  highlightColor?: string; // 하이라이트 배경 색상\r\n  textColor?: string; // 텍스트 색상\r\n  fontWeight?: 'normal' | 'bold' | 'bolder' | 'lighter' | number; // 텍스트 굵기\r\n  animationEffect?: 'fade' | 'scale' | 'color'; // 강조 효과\r\n  onKeywordClick?: (keyword: string) => void; // 키워드 클릭 이벤트\r\n}\r\n\r\nconst TextLine: React.FC<TextLineProps> = ({\r\n  children,\r\n  keywords,\r\n  highlightColor = 'yellow', // 기본 하이라이트 배경색\r\n  textColor = '#000', // 기본 텍스트 색상\r\n  fontWeight = 'bold',\r\n  animationEffect = 'fade', // 기본 애니메이션 효과\r\n  onKeywordClick,\r\n}) => {\r\n  const [highlightedText, setHighlightedText] = useState<JSX.Element[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (typeof children !== 'string') {\r\n      console.error('TextLine children must be a string');\r\n      return;\r\n    }\r\n\r\n    const text = children; // children을 텍스트로 사용\r\n    const regex = new RegExp(`(${keywords.join('|')})`, 'gi'); // 키워드 정규식\r\n    const parts = text.split(regex); // 키워드 기준으로 텍스트 분할\r\n\r\n    const processedText = parts.map((part, index) => {\r\n      if (keywords.includes(part)) {\r\n        return (\r\n          <span\r\n            key={index}\r\n            style={{\r\n              backgroundColor: highlightColor,\r\n              color: textColor,\r\n              fontWeight: fontWeight,\r\n              transition: 'all 0.3s ease-in-out',\r\n              ...(animationEffect === 'scale' && { transform: 'scale(1.2)' }),\r\n              ...(animationEffect === 'color' && { backgroundColor: 'lightblue' }),\r\n            }}\r\n            onClick={() => onKeywordClick && onKeywordClick(part)} // 키워드 클릭 이벤트 실행\r\n            className={`highlight ${animationEffect}`} // 애니메이션 클래스 추가\r\n          >\r\n            {part}\r\n          </span>\r\n        );\r\n      } else {\r\n        return <span key={index}>{part}</span>; // 일반 텍스트 처리\r\n      }\r\n    });\r\n\r\n    setHighlightedText(processedText);\r\n  }, [children, keywords, highlightColor, textColor, fontWeight, animationEffect, onKeywordClick]);\r\n\r\n  return <div>{highlightedText}</div>;\r\n};\r\n\r\nexport default TextLine;\r\n"],"names":["TextLine","children","keywords","highlightColor","textColor","fontWeight","animationEffect","onKeywordClick","highlightedText","setHighlightedText","useState","useEffect","console","error","text","regex","RegExp","join","processedText","split","map","part","index","includes","React","createElement","key","style","Object","assign","backgroundColor","color","transition","transform","onClick","className"],"mappings":"mDAYA,MAAMA,EAAoC,EACxCC,WACAC,WACAC,iBAAiB,SACjBC,YAAY,OACZC,aAAa,OACbC,kBAAkB,OAClBC,qBAEA,MAAOC,EAAiBC,GAAsBC,EAAwB,IAuCtE,OArCAC,GAAU,KACR,GAAwB,iBAAbV,EAET,YADAW,QAAQC,MAAM,sCAIhB,MAAMC,EAAOb,EACPc,EAAQ,IAAIC,OAAO,IAAId,EAASe,KAAK,QAAS,MAG9CC,EAFQJ,EAAKK,MAAMJ,GAEGK,KAAI,CAACC,EAAMC,IACjCpB,EAASqB,SAASF,GAElBG,EAAAC,cAAA,OAAA,CACEC,IAAKJ,EACLK,MACEC,OAAAC,OAAAD,OAAAC,OAAA,CAAAC,gBAAiB3B,EACjB4B,MAAO3B,EACPC,WAAYA,EACZ2B,WAAY,wBACY,UAApB1B,GAA+B,CAAE2B,UAAW,eACxB,UAApB3B,GAA+B,CAAEwB,gBAAiB,cAExDI,QAAS,IAAM3B,GAAkBA,EAAec,GAChDc,UAAW,aAAa7B,KAEvBe,GAIEG,EAAAC,cAAA,OAAA,CAAMC,IAAKJ,GAAQD,KAI9BZ,EAAmBS,EAAc,GAChC,CAACjB,EAAUC,EAAUC,EAAgBC,EAAWC,EAAYC,EAAiBC,IAEzEiB,EAAAC,cAAA,MAAA,KAAMjB,EAAsB"}